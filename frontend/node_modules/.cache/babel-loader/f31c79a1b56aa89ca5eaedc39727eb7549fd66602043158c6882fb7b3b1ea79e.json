{"ast":null,"code":"var _jsxFileName = \"/home/userland/xcute/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client'; // Use ReactDOM from 'react-dom/client' for React 18+\nimport App from './App';\n\n// Create a root element and render the app\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this));\n\n// Initialize Socket.io\nconst socket = io(\"http://localhost:8000\");\n\n// Update contract count\nlet contractCount = 0;\nsocket.on(\"contract\", data => {\n  contractCount++;\n  document.getElementById(\"contract-count\").textContent = contractCount;\n\n  // Add contract to the table\n  const contractTable = document.getElementById(\"contract-table\");\n  const row = document.createElement(\"tr\");\n  row.innerHTML = `\n                <td>${data.contract}</td>\n                <td>${data.group}</td>\n                <td>${data.timestamp}</td>\n            `;\n  contractTable.prepend(row);\n});\n\n// Update transaction count\nlet transactionCount = 0;\nsocket.on(\"buy\", data => {\n  transactionCount++;\n  document.getElementById(\"transaction-count\").textContent = transactionCount;\n\n  // Add transaction to the table\n  const transactionTable = document.getElementById(\"transaction-table\");\n  const row = document.createElement(\"tr\");\n  row.innerHTML = `\n                <td>${data.token_bought}</td>\n                <td>$${data.amount_bought.toFixed(2)}</td>\n                <td>${data.timestamp}</td>\n            `;\n  transactionTable.prepend(row);\n});\n\n// Initialize charts\nconst contractChart = new Chart(document.getElementById(\"contract-chart\"), {\n  type: \"line\",\n  data: {\n    labels: [],\n    datasets: [{\n      label: \"Contracts Detected\",\n      data: [],\n      borderColor: \"#007bff\",\n      fill: false\n    }]\n  },\n  options: {\n    responsive: true,\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: \"Time\"\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: \"Contracts\"\n        }\n      }\n    }\n  }\n});\nconst transactionChart = new Chart(document.getElementById(\"transaction-chart\"), {\n  type: \"bar\",\n  data: {\n    labels: [],\n    datasets: [{\n      label: \"Transactions Executed\",\n      data: [],\n      backgroundColor: \"#28a745\"\n    }]\n  },\n  options: {\n    responsive: true,\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: \"Time\"\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: \"Transactions\"\n        }\n      }\n    }\n  }\n});\n\n// Update charts with real-time data\nsocket.on(\"contract\", data => {\n  const labels = contractChart.data.labels;\n  const dataset = contractChart.data.datasets[0].data;\n  labels.push(data.timestamp);\n  dataset.push(contractCount);\n  if (labels.length > 10) {\n    labels.shift();\n    dataset.shift();\n  }\n  contractChart.update();\n});\nsocket.on(\"buy\", data => {\n  const labels = transactionChart.data.labels;\n  const dataset = transactionChart.data.datasets[0].data;\n  labels.push(data.timestamp);\n  dataset.push(transactionCount);\n  if (labels.length > 10) {\n    labels.shift();\n    dataset.shift();\n  }\n  transactionChart.update();\n});\n\n//ORIGINAL DOCUMENT\n//import React from \"react\";\n//import ReactDOM from \"react-dom\";\n//import App from \"./App\";\n//\n//ReactDOM.render(<App />, document.getElementById(\"root\"));","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","socket","io","contractCount","on","data","textContent","contractTable","row","createElement","innerHTML","contract","group","timestamp","prepend","transactionCount","transactionTable","token_bought","amount_bought","toFixed","contractChart","Chart","type","labels","datasets","label","borderColor","fill","options","responsive","scales","x","display","title","text","y","transactionChart","backgroundColor","dataset","push","length","shift","update"],"sources":["/home/userland/xcute/frontend/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client'; // Use ReactDOM from 'react-dom/client' for React 18+\nimport App from './App';\n\n// Create a root element and render the app\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n\n// Initialize Socket.io\nconst socket = io(\"http://localhost:8000\");\n\n// Update contract count\nlet contractCount = 0;\nsocket.on(\"contract\", (data) => {\n  contractCount++;\n  document.getElementById(\"contract-count\").textContent = contractCount;\n\n  // Add contract to the table\n  const contractTable = document.getElementById(\"contract-table\");\n  const row = document.createElement(\"tr\");\n  row.innerHTML = `\n                <td>${data.contract}</td>\n                <td>${data.group}</td>\n                <td>${data.timestamp}</td>\n            `;\n  contractTable.prepend(row);\n});\n\n// Update transaction count\nlet transactionCount = 0;\nsocket.on(\"buy\", (data) => {\n  transactionCount++;\n  document.getElementById(\"transaction-count\").textContent = transactionCount;\n\n  // Add transaction to the table\n  const transactionTable = document.getElementById(\"transaction-table\");\n  const row = document.createElement(\"tr\");\n  row.innerHTML = `\n                <td>${data.token_bought}</td>\n                <td>$${data.amount_bought.toFixed(2)}</td>\n                <td>${data.timestamp}</td>\n            `;\n  transactionTable.prepend(row);\n});\n\n// Initialize charts\nconst contractChart = new Chart(document.getElementById(\"contract-chart\"), {\n  type: \"line\",\n  data: {\n    labels: [],\n    datasets: [{\n      label: \"Contracts Detected\",\n      data: [],\n      borderColor: \"#007bff\",\n      fill: false\n    }]\n  },\n  options: {\n    responsive: true,\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: \"Time\"\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: \"Contracts\"\n        }\n      }\n    }\n  }\n});\n\nconst transactionChart = new Chart(document.getElementById(\"transaction-chart\"), {\n  type: \"bar\",\n  data: {\n    labels: [],\n    datasets: [{\n      label: \"Transactions Executed\",\n      data: [],\n      backgroundColor: \"#28a745\"\n    }]\n  },\n  options: {\n    responsive: true,\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: \"Time\"\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: \"Transactions\"\n        }\n      }\n    }\n  }\n});\n\n// Update charts with real-time data\nsocket.on(\"contract\", (data) => {\n  const labels = contractChart.data.labels;\n  const dataset = contractChart.data.datasets[0].data;\n\n  labels.push(data.timestamp);\n  dataset.push(contractCount);\n\n  if (labels.length > 10) {\n    labels.shift();\n    dataset.shift();\n  }\n\n  contractChart.update();\n});\n\nsocket.on(\"buy\", (data) => {\n  const labels = transactionChart.data.labels;\n  const dataset = transactionChart.data.datasets[0].data;\n\n  labels.push(data.timestamp);\n  dataset.push(transactionCount);\n\n  if (labels.length > 10) {\n    labels.shift();\n    dataset.shift();\n  }\n\n  transactionChart.update();\n});\n\n\n//ORIGINAL DOCUMENT\n//import React from \"react\";\n//import ReactDOM from \"react-dom\";\n//import App from \"./App\";\n//\n//ReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}